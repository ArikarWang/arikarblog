(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{506:function(v,_,e){"use strict";e.r(_);var l=e(3),o=Object(l.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[v._v("#")]),v._v(" 特性")]),v._v(" "),e("ul",[e("li",[v._v("支持触摸设备")]),v._v(" "),e("li",[v._v("支持拖拽和选择文本")]),v._v(" "),e("li",[v._v("支持智能滚动")]),v._v(" "),e("li",[v._v("支持不同列表之间的拖拽")]),v._v(" "),e("li",[v._v("不以jQuery为基础")]),v._v(" "),e("li",[v._v("和视图模型同步刷新")]),v._v(" "),e("li",[v._v("和vue2的过度动画兼容")]),v._v(" "),e("li",[v._v("支持撤销操作")]),v._v(" "),e("li",[v._v("当需要完全控制时，可以抛出所有变化")]),v._v(" "),e("li",[v._v("可以和现有的UI组件兼容")])]),v._v(" "),e("h2",{attrs:{id:"属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[v._v("#")]),v._v(" 属性")]),v._v(" "),e("h3",{attrs:{id:"element"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#element"}},[v._v("#")]),v._v(" element")]),v._v(" "),e("p",[v._v("String，默认div")]),v._v(" "),e("ul",[e("li",[v._v("就是标签在渲染后展现出来的标签类型")]),v._v(" "),e("li",[v._v("也是包含拖动列表和插槽的外部标签")]),v._v(" "),e("li",[v._v("可以用来兼容UI组件")])]),v._v(" "),e("h3",{attrs:{id:"options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[v._v("#")]),v._v(" options")]),v._v(" "),e("p",[v._v("Object")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("group")]),v._v(": "),e("em",[v._v("string")]),v._v(" or "),e("em",[v._v("array")]),v._v(" 分组用的，同一组的不同list可以相互拖动")]),v._v(" "),e("li",[e("code",[v._v("sort")]),v._v(": "),e("em",[v._v("boolean")]),v._v(" 定义是否可以拖拽")]),v._v(" "),e("li",[e("code",[v._v("delay")]),v._v(": "),e("em",[v._v("number")]),v._v(" 定义鼠标选中列表单元可以开始拖动的延迟时间")]),v._v(" "),e("li",[e("code",[v._v("touchStartThreshold")]),v._v(": "),e("em",[v._v("number")]),v._v(" (不清楚)")]),v._v(" "),e("li",[e("code",[v._v("disabled")]),v._v(": "),e("em",[v._v("boolean")]),v._v(" 定义是否此sortable对象是否可用，为true时sortable对象不能拖放排序等功能")]),v._v(" "),e("li",[e("code",[v._v("animation")]),v._v(": "),e("em",[v._v("number")]),v._v(" 单位:ms 动画时间")]),v._v(" "),e("li",[e("code",[v._v("handle")]),v._v(": selector 格式为简单css选择器的字符串，使列表单元中符合选择器的元素成为拖动的手柄，只有按住拖动手柄才能使列表单元进行拖动")]),v._v(" "),e("li",[e("code",[v._v("filter")]),v._v(": selector 格式为简单css选择器的字符串，定义哪些列表单元不能进行拖放，可设置为多个选择器，中间用“，”分隔")]),v._v(" "),e("li",[e("code",[v._v("preventOnFilter")]),v._v(": 当拖动filter时是否触发event.preventDefault()默认触发")]),v._v(" "),e("li",[e("code",[v._v("draggable")]),v._v(": selector 格式为简单css选择器的字符串，定义哪些列表单元可以进行拖放")]),v._v(" "),e("li",[e("code",[v._v("ghostClass")]),v._v(": selector 格式为简单css选择器的字符串，当拖动列表单元时会生成一个副本作为影子单元来模拟被拖动单元排序的情况，此配置项就是来给这个影子单元添加一个class，我们可以通过这种方式来给影子元素进行编辑样式")]),v._v(" "),e("li",[e("code",[v._v("chosenClass")]),v._v(": selector 格式为简单css选择器的字符串，目标被选中时添加")]),v._v(" "),e("li",[e("code",[v._v("dragClass")]),v._v(": selector 格式为简单css选择器的字符串，目标拖动过程中添加")]),v._v(" "),e("li",[e("code",[v._v("forceFallback")]),v._v(": "),e("em",[v._v("boolean")]),v._v(" 如果设置为true时，将不使用原生的html5的拖放，可以修改一些拖放中元素的样式等")]),v._v(" "),e("li",[e("code",[v._v("fallbackClass")]),v._v(": "),e("em",[v._v("string")]),v._v(" 当forceFallback设置为true时，拖放过程中鼠标附着单元的样式")]),v._v(" "),e("li",[e("code",[v._v("fallbackOnBody")]),v._v(": "),e("em",[v._v("boolean")]),v._v(" 将克隆的DOM元素添加到文档的主体中。（默认放在被拖动元素的同级）")]),v._v(" "),e("li",[e("code",[v._v("fallbackTolerance")]),v._v(": "),e("em",[v._v("number")]),v._v(" 用像素指定鼠标在被视为拖拽之前应该移动的距离。")]),v._v(" "),e("li",[e("code",[v._v("dataIdAttr")]),v._v(": data-id")]),v._v(" "),e("li",[e("code",[v._v("scroll")]),v._v(": "),e("em",[v._v("boolean")]),v._v(" 当排序的容器是个可滚动的区域，拖放可以引起区域滚动")]),v._v(" "),e("li",[e("code",[v._v("scrollFn")]),v._v(": function(offsetX, offsetY, originalEvent, touchEvt, hoverTargetEl) { … } 用于自定义滚动条的适配")]),v._v(" "),e("li",[e("code",[v._v("scrollSensitivity")]),v._v(": "),e("em",[v._v("number")]),v._v(" 就是鼠标靠近边缘多远开始滚动默认30")]),v._v(" "),e("li",[e("code",[v._v("scrollSpeed")]),v._v(": "),e("em",[v._v("number")]),v._v(" 滚动速度")])]),v._v(" "),e("h3",{attrs:{id:"函数配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数配置"}},[v._v("#")]),v._v(" 函数配置")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("setData")]),v._v(": 设置值时的回调函数")]),v._v(" "),e("li",[e("code",[v._v("onChoose")]),v._v(": 选择单元时的回调函数")]),v._v(" "),e("li",[e("code",[v._v("onStart")]),v._v(": 开始拖动时的回调函数")]),v._v(" "),e("li",[e("code",[v._v("onEnd")]),v._v(": 拖动结束时的回调函数")]),v._v(" "),e("li",[e("code",[v._v("onAdd")]),v._v(": 添加单元时的回调函数")]),v._v(" "),e("li",[e("code",[v._v("onUpdate")]),v._v(": 排序发生变化时的回调函数")]),v._v(" "),e("li",[e("code",[v._v("onRemove")]),v._v(": 单元被移动到另一个列表时的回调函数")]),v._v(" "),e("li",[e("code",[v._v("onFilter")]),v._v(": 尝试选择一个被filter过滤的单元的回调函数")]),v._v(" "),e("li",[e("code",[v._v("onMove")]),v._v(": 移动单元时的回调函数")]),v._v(" "),e("li",[e("code",[v._v("onClone")]),v._v(": clone时的回调函数")])])])}),[],!1,null,null,null);_.default=o.exports}}]);